import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report
# Load the dataset
data = pd.read_csv('airline_passenger_satisfaction.csv')
data
            ID  Gender  Age Customer Type Type of Travel         Class  \
0            1    Male   48    First-time       Business      Business   
1            2  Female   35     Returning       Business      Business   
2            3    Male   41     Returning       Business      Business   
3            4    Male   50     Returning       Business      Business   
4            5  Female   49     Returning       Business      Business   
...        ...     ...  ...           ...            ...           ...   
129875  129876    Male   28     Returning       Personal  Economy Plus   
129876  129877    Male   41     Returning       Personal  Economy Plus   
129877  129878    Male   42     Returning       Personal  Economy Plus   
129878  129879    Male   50     Returning       Personal  Economy Plus   
129879  129880  Female   20     Returning       Personal  Economy Plus   

        Flight Distance  Departure Delay  Arrival Delay  \
0                   821                2            5.0   
1                   821               26           39.0   
2                   853                0            0.0   
3                  1905                0            0.0   
4                  3470                0            1.0   
...                 ...              ...            ...   
129875              447                2            3.0   
129876              308                0            0.0   
129877              337                6           14.0   
129878              337               31           22.0   
129879              337                0            0.0   

        Departure and Arrival Time Convenience  ...  On-board Service  \
0                                            3  ...                 3   
1                                            2  ...                 5   
2                                            4  ...                 3   
3                                            2  ...                 5   
4                                            3  ...                 3   
...                                        ...  ...               ...   
129875                                       4  ...                 5   
129876                                       5  ...                 5   
129877                                       5  ...                 3   
129878                                       4  ...                 4   
129879                                       1  ...                 4   

        Seat Comfort  Leg Room Service  Cleanliness  Food and Drink  \
0                  5                 2            5               5   
1                  4                 5            5               3   
2                  5                 3            5               5   
3                  5                 5            4               4   
4                  4                 4            5               4   
...              ...               ...          ...             ...   
129875             1                 4            4               4   
129876             2                 5            2               2   
129877             3                 4            3               3   
129878             4                 5            3               3   
129879             2                 4            2               2   

        In-flight Service  In-flight Wifi Service  In-flight Entertainment  \
0                       5                       3                        5   
1                       5                       2                        5   
2                       3                       4                        3   
3                       5                       2                        5   
4                       3                       3                        3   
...                   ...                     ...                      ...   
129875                  5                       4                        4   
129876                  4                       3                        2   
129877                  4                       2                        3   
129878                  4                       5                        3   
129879                  2                       3                        2   

        Baggage Handling             Satisfaction  
0                      5  Neutral or Dissatisfied  
1                      5                Satisfied  
2                      3                Satisfied  
3                      5                Satisfied  
4                      3                Satisfied  
...                  ...                      ...  
129875                 4  Neutral or Dissatisfied  
129876                 5  Neutral or Dissatisfied  
129877                 5  Neutral or Dissatisfied  
129878                 5                Satisfied  
129879                 1  Neutral or Dissatisfied  

[129880 rows x 24 columns]
# Impute missing values in 'Arrival Delay in Minutes' column with the median
data['Arrival Delay'].fillna(data['Arrival Delay'].median(), inplace=True)
data.isnull().sum()
ID                                        0
Gender                                    0
Age                                       0
Customer Type                             0
Type of Travel                            0
Class                                     0
Flight Distance                           0
Departure Delay                           0
Arrival Delay                             0
Departure and Arrival Time Convenience    0
Ease of Online Booking                    0
Check-in Service                          0
Online Boarding                           0
Gate Location                             0
On-board Service                          0
Seat Comfort                              0
Leg Room Service                          0
Cleanliness                               0
Food and Drink                            0
In-flight Service                         0
In-flight Wifi Service                    0
In-flight Entertainment                   0
Baggage Handling                          0
Satisfaction                              0
dtype: int64
data['Satisfaction']
0         Neutral or Dissatisfied
1                       Satisfied
2                       Satisfied
3                       Satisfied
4                       Satisfied
                   ...           
129875    Neutral or Dissatisfied
129876    Neutral or Dissatisfied
129877    Neutral or Dissatisfied
129878                  Satisfied
129879    Neutral or Dissatisfied
Name: Satisfaction, Length: 129880, dtype: object
# Encode 'satisfaction' as a binary variable
data['satisfaction_binary'] = data['Satisfaction'].apply(lambda x: 1 if x == 'Satisfied' else 0)
# Encode categorical variables
categorical_features = ['Gender', 'Customer Type', 'Type of Travel', 'Class']
data = pd.get_dummies(data, columns=categorical_features, drop_first=True)
# Define features and target variable
X = data.drop(['Satisfaction', 'satisfaction_binary'], axis=1)
y = data['satisfaction_binary']
# Split the data into training and testing sets with stratification
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# Check class distribution in training and testing sets
print("Class distribution in the training set:")
print(y_train.value_counts())

print("Class distribution in the testing set:")
print(y_test.value_counts())

Class distribution in the training set:
0    51416
1    39500
Name: satisfaction_binary, dtype: int64
Class distribution in the testing set:
0    22036
1    16928
Name: satisfaction_binary, dtype: int64
# Initialize and train the logistic regression model
log_reg = LogisticRegression(max_iter=1000)
log_reg.fit(X_train, y_train)
LogisticRegression(max_iter=1000)
# Make predictions on the test set
y_pred = log_reg.predict(X_test)
# Calculate evaluation metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Print the evaluation metrics
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

# Print confusion matrix and classification report
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
Accuracy: 0.8055897751770865
Precision: 0.758985435011353
Recall: 0.8096053875236295
F1 Score: 0.7834786337001572

Confusion Matrix:
 [[17684  4352]
 [ 3223 13705]]

Classification Report:
               precision    recall  f1-score   support

           0       0.85      0.80      0.82     22036
           1       0.76      0.81      0.78     16928

    accuracy                           0.81     38964
   macro avg       0.80      0.81      0.80     38964
weighted avg       0.81      0.81      0.81     38964

# Decision tree model
# Initialize and train the decision tree model
decision_tree = DecisionTreeClassifier(random_state=42)
decision_tree.fit(X_train, y_train)

DecisionTreeClassifier(random_state=42)
# Make predictions on the test set
y_pred = decision_tree.predict(X_test)

# Calculate evaluation metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Print the evaluation metrics
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

# Print confusion matrix and classification report
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
Accuracy: 0.9439995893645416
Precision: 0.9330435804064372
Recall: 0.938445179584121
F1 Score: 0.9357365847911879

Confusion Matrix:
 [[20896  1140]
 [ 1042 15886]]

# Random Forest Model
# Initialize and train the Random Forest model
random_forest = RandomForestClassifier(random_state=42, n_estimators=100)
random_forest.fit(X_train, y_train)

RandomForestClassifier(random_state=42)
# Make predictions on the test set
y_pred = random_forest.predict(X_test)
# Calculate evaluation metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Print the evaluation metrics
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

# Print confusion matrix and classification report
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
Accuracy: 0.9638640796632789
Precision: 0.9733439063071856
Recall: 0.9426394139886578
F1 Score: 0.9577456335153952

Confusion Matrix:
 [[21599   437]
 [  971 15957]]

Classification Report:
               precision    recall  f1-score   support

           0       0.96      0.98      0.97     22036
           1       0.97      0.94      0.96     16928

    accuracy                           0.96     38964
   macro avg       0.97      0.96      0.96     38964
weighted avg       0.96      0.96      0.96     38964



